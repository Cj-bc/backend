{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.sakuten.jp/v1"
    },
    {
      "url": "https://sakuten-api-dev.herokuapp.com"
    },
    {
      "url": "http://localhost:8888"
    }
  ],
  "info": {
    "description": "**This specification is the pre-development vesion** The Web API for the school featival in [Koishikawa Secondary Education School](http://www.koishikawachuto-e.metro.tokyo.jp/). This is developed by the Sakuten Development Team, which is independent of teachers. You can find more about Sakuten at [sakuten.org](https://sakuten.org/). Also you can explore the source code of this system on [GitHub](https://github.com/Sakuten).",
    "version": "0.0.5",
    "title": "Sakuten API",
    "termsOfService": "https://www.sakuten.jp/terms/",
    "contact": {
      "email": "devteam@sakuten.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "user",
      "description": "User Authenication APIs"
    },
    {
      "name": "lottery",
      "description": "Lottery System APIs"
    }
  ],
  "paths": {
    "/auth": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Authenication",
        "description": "",
        "operationId": "Authenicate",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Certificate"
          },
          "400": {
            "description": "Invalid Request / Login Unsuccessful / Unsupported content type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Certificate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Certificate"
              }
            }
          },
          "description": "Authenication Information",
          "required": true
        }
      }
    },
    "/api/status": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get Information about you",
        "description": "",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserInfo"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "user_auth": []
          },
          {
            "admin_auth": []
          }
        ]
      }
    },
    "/api/classrooms": {
      "get": {
        "tags": [
          "lottery"
        ],
        "summary": "Get list of available classrooms",
        "description": "",
        "operationId": "getClassrooms",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ClassroomList"
          }
        }
      }
    },
    "/api/classrooms/{classroomId}": {
      "get": {
        "tags": [
          "lottery"
        ],
        "summary": "Get the information of classroom by id",
        "description": "",
        "operationId": "getClassroomById",
        "parameters": [
          {
            "name": "classroomId",
            "in": "path",
            "description": "ID of classroom to return",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ClassroomID"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ClassroomInfo"
          },
          "400": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/lotteries": {
      "get": {
        "tags": [
          "lottery"
        ],
        "summary": "Get list of lotteries",
        "description": "",
        "operationId": "getLotteries",
        "parameters": [
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "description": "Specify the method to sort the list",
            "required": false
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "example": "available"
            },
            "description": "Specify the filter",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LotteryList"
          }
        }
      }
    },
    "/api/lotteries/{lotteryId}": {
      "get": {
        "tags": [
          "lottery"
        ],
        "summary": "Get information of the lottery by ID",
        "description": "",
        "operationId": "getLotteryById",
        "parameters": [
          {
            "name": "lotteryId",
            "in": "path",
            "description": "ID of the lottery to return",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LotteryID"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LotteryInfo"
          },
          "400": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/lotteries/{lotteryId}/apply": {
      "put": {
        "tags": [
          "lottery"
        ],
        "summary": "Apply to the lottery",
        "description": "",
        "operationId": "applyLotteryById",
        "parameters": [
          {
            "name": "lotteryId",
            "in": "path",
            "description": "ID of the lottery to apply",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LotteryID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/ApplicationID"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not Found / Invalid Request / Lottery has already done / You're already applying to a lottery in this period",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "security": [
          {
            "user_auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "lottery"
        ],
        "summary": "Unapply to the lottery",
        "description": "",
        "operationId": "unapplyLotteryById",
        "parameters": [
          {
            "name": "lotteryId",
            "in": "path",
            "description": "ID of the lottery to apply",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LotteryID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unapplied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/ApplicationID"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not Found / Invalid Request / Lottery has already done / You're already applying to a lottery in this period / You're not applying for this lottery",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "security": [
          {
            "user_auth": []
          }
        ]
      }
    },
    "/api/lotteries/{lotteryId}/draw": {
      "get": {
        "tags": [
          "lottery"
        ],
        "summary": "Draw the lottery",
        "description": "Draw thew lottery and return the list of winning users",
        "operationId": "drawLotteryById",
        "parameters": [
          {
            "name": "lotteryId",
            "in": "path",
            "description": "ID of the lottery to apply",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LotteryID"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserChosen"
          },
          "400": {
            "description": "Not Found / Invalid Request / This lottery is already done and cannot be undone / Nobody is applying to this lottery",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "security": [
          {
            "admin_auth": []
          }
        ]
      }
    }
  },
  "externalDocs": {
    "description": "GitHub",
    "url": "https://github.com/Sakuten/"
  },
  "components": {
    "securitySchemes": {
      "user_auth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "fernet"
      },
      "checker_auth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "fernet"
      },
      "admin_auth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "fernet"
      }
    },
    "responses": {
      "NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "Certificate": {
        "description": "Access Token",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Login Successful"
                },
                "token": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        }
      },
      "UserChosen": {
        "description": "Chosen User",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "chosen": {
                  "$ref": "#/components/schemas/SecretID"
                }
              }
            }
          }
        }
      },
      "UserInfo": {
        "description": "User Information",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "SuccessfulOperation": {
        "description": "Successful Operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "ClassroomList": {
        "description": "List of Classrooms",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Classroom"
              }
            }
          }
        }
      },
      "ClassroomInfo": {
        "description": "Classroom Information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Classroom"
            }
          }
        }
      },
      "LotteryList": {
        "description": "List of Lotteries",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Lottery"
              }
            }
          }
        }
      },
      "LotteryInfo": {
        "description": "Lottery Information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Lottery"
            }
          }
        }
      },
      "InvalidRequest": {
        "description": "Malformed Authenication Header has detected",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        },
        "headers": {
          "WWW-Authenicate": {
            "schema": {
              "type": "string",
              "example": "Bearer error=\"invalid_request\""
            },
            "description": "Authenication Error Code. For details, please refer to RFC 6750 3. The WWW-Authenticate Response Header Field"
          }
        }
      },
      "Unauthorized": {
        "description": "Authorization Failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        },
        "headers": {
          "WWW-Authenicate": {
            "schema": {
              "type": "string",
              "example": "Bearer realm=\"token_required\""
            },
            "description": "Authenication Error Code. For details, please refer to RFC 6750 3. The WWW-Authenticate Response Header Field"
          }
        }
      },
      "Forbidden": {
        "description": "You have no permission to perform the action",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        },
        "headers": {
          "WWW-Authenicate": {
            "schema": {
              "type": "string",
              "example": "Bearer error=\"insufficient_scope\""
            },
            "description": "Authenication Error Code. For details, please refer to RFC 6750 3. The WWW-Authenticate Response Header Field"
          }
        }
      }
    },
    "schemas": {
      "Token": {
        "type": "string",
        "example": "gAAAAABbKh479Z7Pb77oqmdAWBlgrjySjiKO51wvwWp3DvJFk-FfhuVhPPM1iFxNFgUR8WydJkZhV6WbTQP1Rny18ixAQtmicnVUy7tAyCkYq8U5etbuUsgkzv6YCcDph-1z6PXn01fM3AWbnNRvOHip2j-Nby21Gw==",
        "description": "Access Token (fernet)"
      },
      "Message": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "example": "Success",
            "description": "Simple message about the status"
          }
        }
      },
      "ErrorMessage": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "example": "Error",
            "description": "Simple message about the cause of the error"
          }
        }
      },
      "Classroom": {
        "type": "object",
        "required": [
          "id",
          "grade",
          "index"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ClassroomID"
          },
          "grade": {
            "type": "integer",
            "description": "The grade of classroom",
            "example": 5
          },
          "index": {
            "type": "integer",
            "description": "The index of classroom (0->A, 1->B, 2->C, 3->D)",
            "example": 0
          },
          "name": {
            "type": "string",
            "description": "The character refering to the classroom index",
            "example": "A"
          }
        }
      },
      "Lottery": {
        "type": "object",
        "required": [
          "id",
          "done",
          "classroom_id",
          "index"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/LotteryID"
          },
          "done": {
            "type": "boolean",
            "description": "Whether this lottery is done or not",
            "example": false
          },
          "classroom_id": {
            "type": "integer",
            "description": "Classroom Identifier",
            "example": 0
          },
          "index": {
            "type": "integer",
            "description": "The index of the lottery",
            "example": 0
          },
          "name": {
            "type": "string",
            "description": "Display name of the lottery",
            "example": "5A.0"
          }
        }
      },
      "Application": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApplicationID"
          },
          "lottery_id": {
            "$ref": "#/components/schemas/LotteryID"
          },
          "status": {
            "type": "boolean",
            "description": "true if won, false if not won. null means undrawn. (deprecated)",
            "example": true
          },
          "user_id": {
            "$ref": "#/components/schemas/SecretID"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SecretID"
          },
          "username": {
            "$ref": "#/components/schemas/Username"
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          }
        }
      },
      "Certificate": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "$ref": "#/components/schemas/Username"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          }
        }
      },
      "SecretID": {
        "type": "integer",
        "example": 1,
        "description": "User ID number (not secret but named secret for future compatibility)"
      },
      "Username": {
        "type": "string",
        "example": "example1",
        "description": "Username (deprecated; will be replaced by id auth)"
      },
      "Password": {
        "type": "string",
        "example": "example1",
        "description": "Password (deprecated; will be replaced by id auth)"
      },
      "LotteryID": {
        "type": "integer",
        "example": 0,
        "description": "Lottery Identifier"
      },
      "ClassroomID": {
        "type": "integer",
        "example": 0,
        "description": "Classroom Identifier"
      },
      "ApplicationID": {
        "type": "integer",
        "example": 0,
        "description": "Application Identifier"
      }
    }
  }
}